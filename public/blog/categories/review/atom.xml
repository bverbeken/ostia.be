<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: review | Ben Verbeken]]></title>
  <link href="http://ostia.be/blog/categories/review/atom.xml" rel="self"/>
  <link href="http://ostia.be/"/>
  <updated>2012-09-18T23:28:51+02:00</updated>
  <id>http://ostia.be/</id>
  <author>
    <name><![CDATA[Ben Verbeken]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Extreme Programming Explained, without explaining]]></title>
    <link href="http://ostia.be/blog/2012/09/10/xp-explained-without-explaining/"/>
    <updated>2012-09-10T20:38:00+02:00</updated>
    <id>http://ostia.be/blog/2012/09/10/xp-explained-without-explaining</id>
    <content type="html"><![CDATA[<p>I've been reading 'Extreme Programming Explained - Embrace Change', by Kent Beck (<a href="http://twitter.com/kentbeck">@kentbeck</a>). If you've read it too, you're probably thinking: "it's an old book, you should've read it years ago", and I agree. But if you didn't I can only say: you should.</p>

<p>Even if you're working on a software development team but are no programmer; XP Explained does not contain any (as in 'zero') code samples, and it's really about how to develop software as a team.</p>

<!-- more -->


<p>And what better way is there to inspire than by listing up some favorite quotes.</p>

<p><blockquote><p>XP is an opportunity [...] to realize that maybe you've been fine all along and just hanging with the wrong crowd.</p></blockquote>
<blockquote><p>In software development, "perfect" is a verb, not an adjective.</p></blockquote>
<blockquote><p>Quality is not a control variable.</p></blockquote>
<blockquote><p>When you're sick, respect yourself and the rest of your team by resting and getting well. [...] Coming in sick doesn't show commitment to work, because when you do you aren't helping the team.</p></blockquote>
<blockquote><p>If you need to work on an idea alone, go do it. [...] When you're done exploring, bring the resulting idea, not the code, back to the team.</p></blockquote>
<blockquote><p>Planning is a form of necessary waste.</p></blockquote>
<blockquote><p>In any plan, include some tasks that can be dropped if you get behind.</p></blockquote>
<blockquote><p>You can count on gravity. Software has few such certainties. The ten-minute build is as close as we get.</p></blockquote>
<blockquote><p>Any guess about what parts of the system <em>need</em> [...] to be tested introduces the risk of error.</p></blockquote>
<blockquote><p>Team programming isn't a divide and conquer problem. It's a divide, conquer, and integrate problem.</p></blockquote>
<blockquote><p>Test-first programming addresses many problems at once.</p></blockquote>
<blockquote><p>Change begins with awareness.</p></blockquote>
<blockquote><p>Trust your nose about what you need to improve next.</p></blockquote>
<blockquote><p>Maintain only the code and the tests as permanent artifacts.</p></blockquote>
<blockquote><p>Any gap between what is on a programmer's desk and what is in production is a risk.</p></blockquote>
<blockquote><p>Planning in XP is an activity, not a phase.</p></blockquote>
<blockquote><p>A plan in XP is an example of what <em>could</em> happen, not a prediction of what <em>will</em> happen.</p></blockquote>
<blockquote><p>The hum of conversation is a sign of health. Silence is the sound of risk piling up.</p></blockquote>
<blockquote><p>Whichever units you use, hours or points, you will need to deal with the situation where actual results don't match the plan.</p></blockquote>
<blockquote><p>In XP, testing is as important as programming.</p></blockquote>
<blockquote><p>Unfortunately, design in software has been shackled by metaphors from physical design activities.</p></blockquote>
<blockquote><p>Even if this is the umpteenth variation on a theme, there is always a better way to design the<br/>software.</p></blockquote>
<blockquote><p>The question is not <em>whether</em> to design, but <em>when</em> to design.</p></blockquote>
<blockquote><p>Far from "design nothing", the XP strategy is "design always".</p></blockquote>
<blockquote><p>I discover the need for design investment by spotting duplication.</p></blockquote>
<blockquote><p>If you are confronted with a big pile of mud, you can still begin improving the design.<br/>Why is Taylorism important for software engineering? No one walks around a development shop with a clipboard and a stopwatch.</p></blockquote>
<blockquote><p>"Continuous" learning is not continuous.</p></blockquote>
<blockquote><p>So the question, "Is my team extreme?" There isn't a binary answer.</p></blockquote></p>

<p>And last but not least:</p>

<p><blockquote><p>The key to XP is integrity, acting in harmony with my true values.</p></blockquote></p>
]]></content>
  </entry>
  
</feed>
