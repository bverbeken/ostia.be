<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: TDD | Ostia]]></title>
  <link href="http://ostia.be/blog/categories/tdd/atom.xml" rel="self"/>
  <link href="http://ostia.be/"/>
  <updated>2013-03-01T12:00:52+01:00</updated>
  <id>http://ostia.be/</id>
  <author>
    <name><![CDATA[Ben Verbeken]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Play 1 vs Play 2: Hold Your Horses]]></title>
    <link href="http://ostia.be/blog/2013/02/27/play-1-vs-play-2-hold-your-horses/"/>
    <updated>2013-02-27T21:48:00+01:00</updated>
    <id>http://ostia.be/blog/2013/02/27/play-1-vs-play-2-hold-your-horses</id>
    <content type="html"><![CDATA[<p>I work for Cegeka, a company that's proud of not being the regular type of body-shopping consulting firm. Instead, they put together teams of highly skilled, agile-minded people and sell those to clients as a whole. Needless to say I like it there.</p>

<p>Self-improvement is an important part in their philosophy, and in order to do that Cegeka encourages people to participate in so-called <em>Competence Centers</em>. These are groups of people of the same profession - Spotify would call them <a href="http://blog.crisp.se/2012/11/14/henrikkniberg/scaling-agile-at-spotify"><em>guilds</em></a> - who gather a full day about every two months. Kind of like a playground to learn about technology, if you will.  <br/>
Since about a year, I've been in charge of the <a href="http://www.playframework.com/">Playframework</a> competence center, whose goal it is to investigate how well Play fits the <a href="http://agilemanifesto.org/">agile</a>-<a href="http://en.wikipedia.org/wiki/Test-driven_development">TDD</a>-<a href="http://www.infoq.com/presentations/model-to-work-evans">DDD</a> way of working, and whether the playframework elevator pitch holds in a more or less real-life project.</p>

<!-- more -->


<p><em>(Heads up: the following is the reflection of what the competence center members thought as a team, so they are not (exclusively) my own thoughts.)</em></p>

<h2>What we did</h2>

<p>We held 6 sessions throughout the year, during which we built an application from scratch. The app, <em>Hold Your Horses</em> (<a href="https://github.com/cegekaplaycc/">https://github.com/cegekaplaycc/</a>), is a horse race simulation game in which players can buy and sell horses, build stables, buy food, hire trainers, participate in races, win money, you name it.  <br/>
In fact, we built <em>Hold Your Horses</em> twice, and here's the interesting part: we evaluated both Play 1 (4 sessions) and Play 2 with java (2 sessions).   <br/>
When we held the first session back in January 2012, Play 2 had been announced and an RC was available, but the documentation wasn't there yet. So we decided to go with Play 1 for starters and to switch to Play 2 after a few sessions. This would give us the opportunity to compare the two and decide for ourselves.</p>

<p>Development-process-wise, we tried to keep as close as possible to the agile way of working we're used to at Cegeka: story cards and mock-ups were prepared beforehand (<a href="https://trello.com/">Trello</a> rocks, btw!), these stories would get picked up by a pair, who'd implement the story in a test-driven way. However, we stayed away from estimates and story point tracking, which would've just increased the overhead.</p>

<h2>In retrospect</h2>

<p>Last week at the end of the sixth session, we decided to do a retrospective, being good agileists and all. The main question was: what do we think of Play, and where do we go from here.</p>

<p>First we did a little SWOT analysis: I asked everyone to write down what they feel are Play's strengths, weaknesses, opportunities and threats on post-its. Surprise or not, we mostly agreed. Here's what the team wrote down (most of the items are for Play in general, some are about Play 1 and Play 2 specifics):</p>

<p><strong> Strengths: </strong></p>

<ul>
<li>Play is innovative</li>
<li>easy to deploy</li>
<li>No servlets, really fast setup</li>
<li>Fast setup (5x)</li>
<li>No redeploy necessary, hit F5 and see result</li>
<li>Hot deploy</li>
<li>Play is stateless (4x)</li>
<li>easy to deploy in the cloud (Heroku)</li>
<li>Play app structure is easy to understand, it's easy to find your way</li>
<li>Templating system is fun for easy things, but we haven't built any really complicated screens yet</li>
<li>Play1 specific

<ul>
<li>flat learning curve</li>
<li>speed of development</li>
</ul>
</li>
<li>Play2 specific

<ul>
<li>the routes file is compiled</li>
</ul>
</li>
</ul>


<p><strong> Weaknesses: </strong></p>

<ul>
<li>technical problems, things that don't work as they are supposed to</li>
<li>Documentation (3x)</li>
<li>Things go quickly, until you hit a problem. Googleing for a solution doesn't help</li>
<li>Play vs Eclipse</li>
<li>using play results in badly tested code</li>
<li>testability, running tests from within the IDE != easy. Result: hard to do TDD</li>
<li>Testing != easy. Perhaps to do with our lack of knowledge?</li>
<li>About Play 1

<ul>
<li>auto-magical stuff (enhancers etc)</li>
</ul>
</li>
<li>About Play 2

<ul>
<li>Sbt != easy</li>
<li>bad java support in Play 2</li>
</ul>
</li>
</ul>


<p><strong> Opportunities: </strong></p>

<ul>
<li>get to know HTML(5) and http better</li>
<li>It's really different from what we're used to</li>
<li>Let's revive Play 1, go back to easy and fast of Play 1</li>
<li>Play 2 + Scala = a hype. Enterprise Java killer?</li>
</ul>


<p><strong> Threats: </strong></p>

<ul>
<li>Too (?) innovative</li>
<li>Play 2 core is written in Scala</li>
<li>EBean is not simple and has bugs (e.g. getter and setter needed, even for public id field)</li>
<li>Play 2 templates: steep learning curve</li>
<li>Play 2: too many new things to be easy to learn</li>
<li>Java devs are left in the cold</li>
<li>Play 1 is dead, Play 2 for java != Ok (both a threat as an opportunity)</li>
<li>No best practices concerning packaging and layering. Play is only suited for small projects?</li>
</ul>


<h2>What we think</h2>

<p>We know we like Play 1 a lot. Being a java framework, it's right in our comfort zone, and we can read, understand and debug through the framework code.  <br/>
We love the statelessness of the framework; development is really fast thanks to hit-F5-and-it's-there, and it makes it easy to deploy to the cloud. Furthermore, the learning curve is flat, because of the simple conventions and known technologies under the hood (hibernate, for one). <br/>
On the testing side, things could be improved. Either we don't really understand how we should test a stateless web app (lack of knowledge), or Play 1 lacks the tools to do so. The fact that there's so much static things going on doesn't help, but not a major hurdle.</p>

<p>Play 2 is a different story. The main ideas we knew from Play 1 are there (statelessness, the routes file, the MVC approach), but there are just too many things to learn to make it easy to use right away. We didn't like EBean, and struggled with the compiled templates and sbt, both of which feel very un-java-like (I hear you thinking: Duh, of course they do. More on that below ;)).</p>

<p>All in all, we now know what Playframework can do for us, there's definitely value there, but Play 2 with Java just doesn't feel right to us. <br/>
Or, as someone put it: "We should fork Play 1" (which btw has been <a href="http://www.github.com/yalpframework/yalp">done</a> by now).</p>

<h2>Where we're heading</h2>

<p>One question remains, though: until now, we used Java. Is our gut feeling correct; is Play 2 a better fit for Scala than it is for Java?  <br/>
Of course there's only one way to find out, so we're going to build yet another app, using Play 2 + Scala this time. (Might not be <em>Hold Your Horses</em> though, we're sick of horses by now).</p>

<p>We know it's going to be tough; most of us have only touched scala briefly through the <a href="https://www.coursera.org/course/progfun">Coursera</a> course, or not at all. But we wouldn't be good developers if we weren't ready to step out of our comfort zone, now would we. <br/>
On the other hand, it's going to be fun too, we're planning a <a href="http://scalatron.github.com/">scalatron</a> battle as we speak.</p>

<p>What do you think? Are there hard and easier ways to learn a language like Scala? Things we should/shouldn't do?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Legacy code, an epyphany]]></title>
    <link href="http://ostia.be/blog/2013/01/29/legacy-code/"/>
    <updated>2013-01-29T08:14:00+01:00</updated>
    <id>http://ostia.be/blog/2013/01/29/legacy-code</id>
    <content type="html"><![CDATA[<p>Until recently, I used the term <em>legacy code</em> for bad, ancient code that had been written ten consultants ago, for code that has stopped evolving because it's too complicated and critical that nobody dares to take responsibility, for code that came from someone else, you get the idea. We've all seen that code and we all love to hate that consultant, don't we.</p>

<p>And then I learned about another definition of legacy code, one that Michael Feathers (<a href="https://twitter.com/mfeathers">@mfeathers</a>) introduced in his book, <a href="http://www.informit.com/store/working-effectively-with-legacy-code-9780131177055">Working Effectively with Legacy Code</a>:</p>

<p><blockquote><p>legacy code is code without tests.</p></blockquote></p>

<p>Nice, short and catchy, but until yesterday I didn't really understand this is indeed a very good definition of legacy code.</p>

<!-- more -->


<p>I'm working on a large scale web application, in a company with multiple teams, each of which is responsible for a single application.<br/>
One of the guys on my team, let's call him Alex, had been working on a restful web service api that would be called by one of those other teams. Couple of days work, the story card moved from TODO over DOING to DONE on our kanban board, story done.</p>

<p>Fast forward a couple of weeks. A guy from the other team, Bart, comes in and tells me there's something wrong with the webservice: in a specific case, our code wouldn't reply with a <em>bad request</em>, but an <em>ok</em>. A bug. No biggie, but a bug nevertheless. I go look in the code, to only find production code. Not a single test there.</p>

<p><em>(Before going on, an important note: I'm not blaming Alex. Nobody writes bugfree code. In Alex's defence, this web service api is a thin layer on top of the core application and thin layers should be trivial. So I understand why writing tests in this case seem like a waste of time.)</em></p>

<p>Back to the bug. I have a couple of options here.</p>

<ul>
<li>I could <strong>delegate</strong> the bug to Alex, so that it's not my problem anymore. However, Alex is part of the team today, but what if another bug bites when he's not anymore?</li>
<li>I could debug through the code, until I find the bug. <strong>Just fix it</strong> and be done with it. But how do I know I don't introduce a new bug? How do I make sure I fixed the bug?</li>
<li>Better, I could <strong>write a single test</strong> that reproduces this bug, and then fix it. However,  we'd still rely on the other team's testing to know whether our api is any good. Furthermore, it could be hard to write a single failing test; perhaps the code as it is now is not very testable, given that it had been written without tests in the first place.</li>
<li>I could treat our web service api like a nuclear reactor: build a concrete shield <strong>wall of solid integration tests</strong> around it, without touching the code. Then refactor, and then write the test that reproduces the bug. But that would be very time-consuming.</li>
</ul>


<p>All of these options above are flawed to some degree. Either they involve unprofessional behaviour, or I need to spend more time then I would like to solve the bug.</p>

<p>The point is that I have the exact same options of responding to this particular bug as I do for a bug in bad code that's been there for years. It doesn't matter when the code was written or whether the guy who wrote it is still on the team or not, untested code is a black box.  <br/>
And if the cure is the same, it must be the same disease, the rest is just politics and religion.</p>

<p>Hence: legacy code is untested code and untested code is legacy code, QED.</p>

<p><em>On a side note: Michael Feathers will be doing a keynote at the <a href="https://twitter.com/JoyOfCoding">@JoyOfCoding</a> conference in Rotterdam (The Netherlands) soon. I doubt I'll be able to make it there, my family's got a major release coming up. But do check it out, <a href="http://joyofcoding.org">the program</a> is well worth it!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[play 2 JUnit runner]]></title>
    <link href="http://ostia.be/blog/2012/10/20/play-2-test-runner/"/>
    <updated>2012-10-20T17:38:00+02:00</updated>
    <id>http://ostia.be/blog/2012/10/20/play-2-test-runner</id>
    <content type="html"><![CDATA[<p>I like Play 2. It's simply the best thing that happened on the JVM since, well, Play 1 :)</p>

<p>One thing bothers me though: testing is still a bit of a PITA (at least in Java). Sure, Play 2 has webdriver support, you don't have to extend <code>UnitTest</code> and <code>FunctionalTest</code> anymore and you can unit-test templates. But, instead of extending base test classes I have to call a bunch of static utility methods on the <code>play.test.Helpers</code> class.</p>

<p>For example, to write a test that runs inside an application (i.e. has access to its environment), I have to write the following:</p>

<script src="https://gist.github.com/3917715.js?file=BeforeOrganisationTest.java"></script>


<p>In his excellent <a href="http://blog.matthieuguillermin.fr/2012/03/unit-testing-tricks-for-play-2-0-and-ebean/">blog post</a>, Matthieu Guillermin (<a href="https://twitter.com/MGuillermin">@mguillermin</a>) shows a solution for this problem (amongs others) by creating an abstract base class that contains the boilerplate code.
This works very well, but I prefer composition over inheritance, so I'm using a custom JUnit runner for this.</p>

<script src="https://gist.github.com/3917715.js?file=PlayJUnitRunner.java"></script>


<p>Then, you can use this runner in an <code>@runWith</code> annotation, and just write your test code without wrapping it in a <code>Runnable</code>, like so:</p>

<script src="https://gist.github.com/3917715.js?file=AfterOrganisationTest.java"></script>


<p>Until next time!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[To Test Or Not To Test]]></title>
    <link href="http://ostia.be/blog/2012/08/29/totestornottotest/"/>
    <updated>2012-08-29T23:04:00+02:00</updated>
    <id>http://ostia.be/blog/2012/08/29/totestornottotest</id>
    <content type="html"><![CDATA[<p>I recently decided to participate in a <a href="http://www.radrace.org/en/index.html">RAD race</a>, which will be held on 9 and 10 November. A RAD race is a competition in which teams (of two people in this case) build a real-life application in two days, using the language and tools of their choice. <!-- more -->   <br/>
'Rapid Application Development' is an old term whose meaning changed a couple of times over the course of history and even brings back memories of some IBM products *shivers*. But the fact that people still organise these events shows that we keep looking for better, cheaper, faster ways of building software. This  particular RAD race is being held for the 15th time, nuff said.</p>

<h2>The Problem</h2>

<p>On the technology side everything is clear. We'll be building the app using <a href="http://www.playframework.org">PlayFramework</a> - only the single best way to build java web apps -, Java, Twitter Bootstrap, JQuery. We'll be using Git for version management, and probably Eclipse on Windows. I'm still in negotiation with my teammate - let's call him Matti - about the latter two. (If you ask him, we're only negotiating about Git and perhaps a client-side mvc framework. In short: no question there ;-)).</p>

<p>But right in the middle of the excitement Matti and I felt when we decided to enter the competition, a question popped up: what about <strong>testing</strong>?   <br/>
What should we test? When should we be writing them? Should we be writing any tests at all?</p>

<p>For any real project, the answer would be simple: we'd be writing tests for everything, and we'd be writing them first.
But for the RAD race, things may be different.</p>

<h2>The funny thing about simulation games</h2>

<p>As a student, I regularily participated in stock exchange simulation games. That is, until I got annoyed enough by the fact that the winner was always the one who put all of his play money in one basket. Sure, for every winner, there were tens of people who used the same strategy and didn't win, but neither did the ones who did build a life-like diversified portfolio.</p>

<p>The point is that every simulation game rule system has its flaws, and that participants can exploit these flaws in order to win. In most stock exchange simulation games, the flaw is that there's no real money,  so in order to maximize profit, you take as much (fake) risk as you can.  <br/>
In a RAD race, the flaw is that your code won't be running in production for years to come. There won't be angry users asking for quick hacks on the phone, and no third or fourth generation junior developer who's made responsible for maintaining the damned thing.</p>

<h2>TDD vs Time</h2>

<p>Does this mean that my teammate and I won't be writing time-consuming tests during the RAD race? Hell no!</p>

<p>First, saying that TDD is time-consuming is like saying your bookkeeper is costing you money. If it is, you're doing it wrong. <br/>
TDD is about producing time, namely time you won't be spending looking for that annoying business blocking bug. Which will probably be during a weekend in your holiday or the one right before your code goes into production.  <br/>
And if your code doesn't go into production, the bug will definitely bite you during the demo you're giving to one of the RAD race judges.</p>

<p>Secondly, saying that writing tests is time-consuming implies a direct relationship between Lines Of Code and Time. Or that the productivity of a programmer can be measured in LOC, which is absurd, of course.</p>

<p>So we won't be writing legacy code (aka code without tests) from the start of the RAD race. We will, however, adapt ourselves to the situation, <em>in casu</em> a simulation game situation.  <br/>
We'll plan to TDD the business logic, especially if there's complex algorithms involved. And we'll have UI tests that cover at least every page in the app, but probably without checking every possible corner case.     <br/>
But I'm still negotiating on that with Matti.</p>
]]></content>
  </entry>
  
</feed>
