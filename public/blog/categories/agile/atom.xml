<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: agile | Ostia]]></title>
  <link href="http://ostia.be/blog/categories/agile/atom.xml" rel="self"/>
  <link href="http://ostia.be/"/>
  <updated>2013-03-01T12:00:52+01:00</updated>
  <id>http://ostia.be/</id>
  <author>
    <name><![CDATA[Ben Verbeken]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Play 1 vs Play 2: Hold Your Horses]]></title>
    <link href="http://ostia.be/blog/2013/02/27/play-1-vs-play-2-hold-your-horses/"/>
    <updated>2013-02-27T21:48:00+01:00</updated>
    <id>http://ostia.be/blog/2013/02/27/play-1-vs-play-2-hold-your-horses</id>
    <content type="html"><![CDATA[<p>I work for Cegeka, a company that's proud of not being the regular type of body-shopping consulting firm. Instead, they put together teams of highly skilled, agile-minded people and sell those to clients as a whole. Needless to say I like it there.</p>

<p>Self-improvement is an important part in their philosophy, and in order to do that Cegeka encourages people to participate in so-called <em>Competence Centers</em>. These are groups of people of the same profession - Spotify would call them <a href="http://blog.crisp.se/2012/11/14/henrikkniberg/scaling-agile-at-spotify"><em>guilds</em></a> - who gather a full day about every two months. Kind of like a playground to learn about technology, if you will.  <br/>
Since about a year, I've been in charge of the <a href="http://www.playframework.com/">Playframework</a> competence center, whose goal it is to investigate how well Play fits the <a href="http://agilemanifesto.org/">agile</a>-<a href="http://en.wikipedia.org/wiki/Test-driven_development">TDD</a>-<a href="http://www.infoq.com/presentations/model-to-work-evans">DDD</a> way of working, and whether the playframework elevator pitch holds in a more or less real-life project.</p>

<!-- more -->


<p><em>(Heads up: the following is the reflection of what the competence center members thought as a team, so they are not (exclusively) my own thoughts.)</em></p>

<h2>What we did</h2>

<p>We held 6 sessions throughout the year, during which we built an application from scratch. The app, <em>Hold Your Horses</em> (<a href="https://github.com/cegekaplaycc/">https://github.com/cegekaplaycc/</a>), is a horse race simulation game in which players can buy and sell horses, build stables, buy food, hire trainers, participate in races, win money, you name it.  <br/>
In fact, we built <em>Hold Your Horses</em> twice, and here's the interesting part: we evaluated both Play 1 (4 sessions) and Play 2 with java (2 sessions).   <br/>
When we held the first session back in January 2012, Play 2 had been announced and an RC was available, but the documentation wasn't there yet. So we decided to go with Play 1 for starters and to switch to Play 2 after a few sessions. This would give us the opportunity to compare the two and decide for ourselves.</p>

<p>Development-process-wise, we tried to keep as close as possible to the agile way of working we're used to at Cegeka: story cards and mock-ups were prepared beforehand (<a href="https://trello.com/">Trello</a> rocks, btw!), these stories would get picked up by a pair, who'd implement the story in a test-driven way. However, we stayed away from estimates and story point tracking, which would've just increased the overhead.</p>

<h2>In retrospect</h2>

<p>Last week at the end of the sixth session, we decided to do a retrospective, being good agileists and all. The main question was: what do we think of Play, and where do we go from here.</p>

<p>First we did a little SWOT analysis: I asked everyone to write down what they feel are Play's strengths, weaknesses, opportunities and threats on post-its. Surprise or not, we mostly agreed. Here's what the team wrote down (most of the items are for Play in general, some are about Play 1 and Play 2 specifics):</p>

<p><strong> Strengths: </strong></p>

<ul>
<li>Play is innovative</li>
<li>easy to deploy</li>
<li>No servlets, really fast setup</li>
<li>Fast setup (5x)</li>
<li>No redeploy necessary, hit F5 and see result</li>
<li>Hot deploy</li>
<li>Play is stateless (4x)</li>
<li>easy to deploy in the cloud (Heroku)</li>
<li>Play app structure is easy to understand, it's easy to find your way</li>
<li>Templating system is fun for easy things, but we haven't built any really complicated screens yet</li>
<li>Play1 specific

<ul>
<li>flat learning curve</li>
<li>speed of development</li>
</ul>
</li>
<li>Play2 specific

<ul>
<li>the routes file is compiled</li>
</ul>
</li>
</ul>


<p><strong> Weaknesses: </strong></p>

<ul>
<li>technical problems, things that don't work as they are supposed to</li>
<li>Documentation (3x)</li>
<li>Things go quickly, until you hit a problem. Googleing for a solution doesn't help</li>
<li>Play vs Eclipse</li>
<li>using play results in badly tested code</li>
<li>testability, running tests from within the IDE != easy. Result: hard to do TDD</li>
<li>Testing != easy. Perhaps to do with our lack of knowledge?</li>
<li>About Play 1

<ul>
<li>auto-magical stuff (enhancers etc)</li>
</ul>
</li>
<li>About Play 2

<ul>
<li>Sbt != easy</li>
<li>bad java support in Play 2</li>
</ul>
</li>
</ul>


<p><strong> Opportunities: </strong></p>

<ul>
<li>get to know HTML(5) and http better</li>
<li>It's really different from what we're used to</li>
<li>Let's revive Play 1, go back to easy and fast of Play 1</li>
<li>Play 2 + Scala = a hype. Enterprise Java killer?</li>
</ul>


<p><strong> Threats: </strong></p>

<ul>
<li>Too (?) innovative</li>
<li>Play 2 core is written in Scala</li>
<li>EBean is not simple and has bugs (e.g. getter and setter needed, even for public id field)</li>
<li>Play 2 templates: steep learning curve</li>
<li>Play 2: too many new things to be easy to learn</li>
<li>Java devs are left in the cold</li>
<li>Play 1 is dead, Play 2 for java != Ok (both a threat as an opportunity)</li>
<li>No best practices concerning packaging and layering. Play is only suited for small projects?</li>
</ul>


<h2>What we think</h2>

<p>We know we like Play 1 a lot. Being a java framework, it's right in our comfort zone, and we can read, understand and debug through the framework code.  <br/>
We love the statelessness of the framework; development is really fast thanks to hit-F5-and-it's-there, and it makes it easy to deploy to the cloud. Furthermore, the learning curve is flat, because of the simple conventions and known technologies under the hood (hibernate, for one). <br/>
On the testing side, things could be improved. Either we don't really understand how we should test a stateless web app (lack of knowledge), or Play 1 lacks the tools to do so. The fact that there's so much static things going on doesn't help, but not a major hurdle.</p>

<p>Play 2 is a different story. The main ideas we knew from Play 1 are there (statelessness, the routes file, the MVC approach), but there are just too many things to learn to make it easy to use right away. We didn't like EBean, and struggled with the compiled templates and sbt, both of which feel very un-java-like (I hear you thinking: Duh, of course they do. More on that below ;)).</p>

<p>All in all, we now know what Playframework can do for us, there's definitely value there, but Play 2 with Java just doesn't feel right to us. <br/>
Or, as someone put it: "We should fork Play 1" (which btw has been <a href="http://www.github.com/yalpframework/yalp">done</a> by now).</p>

<h2>Where we're heading</h2>

<p>One question remains, though: until now, we used Java. Is our gut feeling correct; is Play 2 a better fit for Scala than it is for Java?  <br/>
Of course there's only one way to find out, so we're going to build yet another app, using Play 2 + Scala this time. (Might not be <em>Hold Your Horses</em> though, we're sick of horses by now).</p>

<p>We know it's going to be tough; most of us have only touched scala briefly through the <a href="https://www.coursera.org/course/progfun">Coursera</a> course, or not at all. But we wouldn't be good developers if we weren't ready to step out of our comfort zone, now would we. <br/>
On the other hand, it's going to be fun too, we're planning a <a href="http://scalatron.github.com/">scalatron</a> battle as we speak.</p>

<p>What do you think? Are there hard and easier ways to learn a language like Scala? Things we should/shouldn't do?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extreme Programming Explained, without explaining]]></title>
    <link href="http://ostia.be/blog/2012/09/10/xp-explained-without-explaining/"/>
    <updated>2012-09-10T20:38:00+02:00</updated>
    <id>http://ostia.be/blog/2012/09/10/xp-explained-without-explaining</id>
    <content type="html"><![CDATA[<p>I've been reading 'Extreme Programming Explained - Embrace Change', by Kent Beck (<a href="http://twitter.com/kentbeck">@kentbeck</a>). If you've read it too, you're probably thinking: "it's an old book, you should've read it years ago", and I agree. But if you didn't I can only say: you should.</p>

<p>Even if you're working on a software development team but are no programmer; XP Explained does not contain any (as in 'zero') code samples, and it's really about how to develop software as a team.</p>

<!-- more -->


<p>And what better way is there to inspire than by listing up some favorite quotes.</p>

<p><blockquote><p>XP is an opportunity [...] to realize that maybe you've been fine all along and just hanging with the wrong crowd.</p></blockquote>
<blockquote><p>In software development, "perfect" is a verb, not an adjective.</p></blockquote>
<blockquote><p>Quality is not a control variable.</p></blockquote>
<blockquote><p>When you're sick, respect yourself and the rest of your team by resting and getting well. [...] Coming in sick doesn't show commitment to work, because when you do you aren't helping the team.</p></blockquote>
<blockquote><p>If you need to work on an idea alone, go do it. [...] When you're done exploring, bring the resulting idea, not the code, back to the team.</p></blockquote>
<blockquote><p>Planning is a form of necessary waste.</p></blockquote>
<blockquote><p>In any plan, include some tasks that can be dropped if you get behind.</p></blockquote>
<blockquote><p>You can count on gravity. Software has few such certainties. The ten-minute build is as close as we get.</p></blockquote>
<blockquote><p>Any guess about what parts of the system <em>need</em> [...] to be tested introduces the risk of error.</p></blockquote>
<blockquote><p>Team programming isn't a divide and conquer problem. It's a divide, conquer, and integrate problem.</p></blockquote>
<blockquote><p>Test-first programming addresses many problems at once.</p></blockquote>
<blockquote><p>Change begins with awareness.</p></blockquote>
<blockquote><p>Trust your nose about what you need to improve next.</p></blockquote>
<blockquote><p>Maintain only the code and the tests as permanent artifacts.</p></blockquote>
<blockquote><p>Any gap between what is on a programmer's desk and what is in production is a risk.</p></blockquote>
<blockquote><p>Planning in XP is an activity, not a phase.</p></blockquote>
<blockquote><p>A plan in XP is an example of what <em>could</em> happen, not a prediction of what <em>will</em> happen.</p></blockquote>
<blockquote><p>The hum of conversation is a sign of health. Silence is the sound of risk piling up.</p></blockquote>
<blockquote><p>Whichever units you use, hours or points, you will need to deal with the situation where actual results don't match the plan.</p></blockquote>
<blockquote><p>In XP, testing is as important as programming.</p></blockquote>
<blockquote><p>Unfortunately, design in software has been shackled by metaphors from physical design activities.</p></blockquote>
<blockquote><p>Even if this is the umpteenth variation on a theme, there is always a better way to design the<br/>software.</p></blockquote>
<blockquote><p>The question is not <em>whether</em> to design, but <em>when</em> to design.</p></blockquote>
<blockquote><p>Far from "design nothing", the XP strategy is "design always".</p></blockquote>
<blockquote><p>I discover the need for design investment by spotting duplication.</p></blockquote>
<blockquote><p>If you are confronted with a big pile of mud, you can still begin improving the design.<br/>Why is Taylorism important for software engineering? No one walks around a development shop with a clipboard and a stopwatch.</p></blockquote>
<blockquote><p>"Continuous" learning is not continuous.</p></blockquote>
<blockquote><p>So the question, "Is my team extreme?" There isn't a binary answer.</p></blockquote></p>

<p>And last but not least:</p>

<p><blockquote><p>The key to XP is integrity, acting in harmony with my true values.</p></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[To Test Or Not To Test]]></title>
    <link href="http://ostia.be/blog/2012/08/29/totestornottotest/"/>
    <updated>2012-08-29T23:04:00+02:00</updated>
    <id>http://ostia.be/blog/2012/08/29/totestornottotest</id>
    <content type="html"><![CDATA[<p>I recently decided to participate in a <a href="http://www.radrace.org/en/index.html">RAD race</a>, which will be held on 9 and 10 November. A RAD race is a competition in which teams (of two people in this case) build a real-life application in two days, using the language and tools of their choice. <!-- more -->   <br/>
'Rapid Application Development' is an old term whose meaning changed a couple of times over the course of history and even brings back memories of some IBM products *shivers*. But the fact that people still organise these events shows that we keep looking for better, cheaper, faster ways of building software. This  particular RAD race is being held for the 15th time, nuff said.</p>

<h2>The Problem</h2>

<p>On the technology side everything is clear. We'll be building the app using <a href="http://www.playframework.org">PlayFramework</a> - only the single best way to build java web apps -, Java, Twitter Bootstrap, JQuery. We'll be using Git for version management, and probably Eclipse on Windows. I'm still in negotiation with my teammate - let's call him Matti - about the latter two. (If you ask him, we're only negotiating about Git and perhaps a client-side mvc framework. In short: no question there ;-)).</p>

<p>But right in the middle of the excitement Matti and I felt when we decided to enter the competition, a question popped up: what about <strong>testing</strong>?   <br/>
What should we test? When should we be writing them? Should we be writing any tests at all?</p>

<p>For any real project, the answer would be simple: we'd be writing tests for everything, and we'd be writing them first.
But for the RAD race, things may be different.</p>

<h2>The funny thing about simulation games</h2>

<p>As a student, I regularily participated in stock exchange simulation games. That is, until I got annoyed enough by the fact that the winner was always the one who put all of his play money in one basket. Sure, for every winner, there were tens of people who used the same strategy and didn't win, but neither did the ones who did build a life-like diversified portfolio.</p>

<p>The point is that every simulation game rule system has its flaws, and that participants can exploit these flaws in order to win. In most stock exchange simulation games, the flaw is that there's no real money,  so in order to maximize profit, you take as much (fake) risk as you can.  <br/>
In a RAD race, the flaw is that your code won't be running in production for years to come. There won't be angry users asking for quick hacks on the phone, and no third or fourth generation junior developer who's made responsible for maintaining the damned thing.</p>

<h2>TDD vs Time</h2>

<p>Does this mean that my teammate and I won't be writing time-consuming tests during the RAD race? Hell no!</p>

<p>First, saying that TDD is time-consuming is like saying your bookkeeper is costing you money. If it is, you're doing it wrong. <br/>
TDD is about producing time, namely time you won't be spending looking for that annoying business blocking bug. Which will probably be during a weekend in your holiday or the one right before your code goes into production.  <br/>
And if your code doesn't go into production, the bug will definitely bite you during the demo you're giving to one of the RAD race judges.</p>

<p>Secondly, saying that writing tests is time-consuming implies a direct relationship between Lines Of Code and Time. Or that the productivity of a programmer can be measured in LOC, which is absurd, of course.</p>

<p>So we won't be writing legacy code (aka code without tests) from the start of the RAD race. We will, however, adapt ourselves to the situation, <em>in casu</em> a simulation game situation.  <br/>
We'll plan to TDD the business logic, especially if there's complex algorithms involved. And we'll have UI tests that cover at least every page in the app, but probably without checking every possible corner case.     <br/>
But I'm still negotiating on that with Matti.</p>
]]></content>
  </entry>
  
</feed>
