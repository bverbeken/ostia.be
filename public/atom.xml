<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ostia]]></title>
  <link href="http://ostia.be/atom.xml" rel="self"/>
  <link href="http://ostia.be/"/>
  <updated>2012-10-06T11:48:05+02:00</updated>
  <id>http://ostia.be/</id>
  <author>
    <name><![CDATA[Ben Verbeken]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dojo]]></title>
    <link href="http://ostia.be/blog/2012/10/04/dojo/"/>
    <updated>2012-10-04T13:43:00+02:00</updated>
    <id>http://ostia.be/blog/2012/10/04/dojo</id>
    <content type="html"><![CDATA[<p>The Belgian Playframework User Group held it&#8217;s first coding event last Wednesday: a Coding Dojo.   <br/>
The ingrediÃ«nts: 17 nice people, a decent sized room, food and drinks, and Playframework of course.</p>

<p>A <a href="http://www.codingdojo.org">Coding Dojo</a> is an event where people gather to code and learn together. The goal of a dojo is exactly that: to code and learn, nothing more. It&#8217;s about the journey, not the destination.   <br/>
Ours was a <em>Randori Kata</em>, a kind of dojo where the whole group works together to build an application in a couple of hours, by pair programming on stage. We changed that format just a wee bit, more on that further down in this post.</p>

<!-- more -->


<h2>The Application</h2>

<p>The application we built is called QuickQuizz, a quiz engine for Twitter. The idea is simple: Quickquizz allows quizmasters to write questions and the expected answer. It tweets the questions on a special <a href="http://twitter.com/quickquizz">@quickquizz</a> account, and people can answer these questions by replying to the tweet. Quickquizz then fetches the answers (asynchronously, using <a href="http://akka.io">Akka</a>), scores them and shows an overview of all quizzers and their scores on a simple overview page.</p>

<p>We managed to get most of this done in about three hours (start up and break included). The resulting code is on github (<a href="http://github.com/playbe/quickquizz-dojo">http://github.com/playbe/quickquizz-dojo</a>).   <br/>
But please remember, if you decide to take a peek at the code, that it&#8217;s all about the <em>journey</em>, not the destination :).</p>

<h2>The Journey</h2>

<p>The original idea was to have two people pair programming on a laptop in front of the room, with the audience following their progress on a big screen behind them, and to switch one of the pair every ten minutes.
But when I got to the cegeka offices in the afternoon to prepare, I noticed that the wireless keyboard and mouse I brought actually worked from everywhere in the room, with the laptop open in front. So instead of moving the participants every ten minutes, we decided to move around the mouse and keyboard.</p>

<p>That was a game changer. People did not have to get on the stage, they could literally work from within the group. The rest of us, who didn&#8217;t have the keyboard, were not the <em>audience</em>, but actively participated in helping the keyboard holder.  <br/>
Also, the fact that we were sitting around tables in a big U-shape helped the interaction between the participants.</p>

<h2>Lessons Learned</h2>

<p>I think the dojo was a success. We gathered play enthusiasts, wrote some cool code, and had fun while doing that. However, there are some things I want to write down for future reference; things that can be improved.</p>

<h3>Make the coder order unpredictable</h3>

<p>The keyboard was passed along from left to right (or right to left, depending on your viewpoint). Result was that everything became quite predictable: people at the end of the U knew they wouldn&#8217;t have to code before some time, and the ones who coded in the beginning of the evening knew their turn was over.  <br/>
Perhaps we need to make it a bit less predictable (randomize?) next time.</p>

<h3>The First coder</h3>

<p>We deliberately chose to start with an empty page, to show how easy it is with Play to start a new project.        <br/>
However, we should&#8217;ve made sure the first guy at the keyboard had already played with Play 2 before at least a bit. <code>play new quickquizz</code> is easy, but right after that, you need to start using the framework. And that&#8217;s a hard thing to do if you never used it.
Btw: Sorry Tim, next time you&#8217;re not the first one, I promise ;)</p>

<h3>IDE Woes</h3>

<p>I&#8217;m an IntelliJ fan, I&#8217;ve been one since version 5 or so. However, I respect other people&#8217;s choice. Even if there really is no choice :)
The thing is, during the dojo, some people struggled with the keyboard shortcuts. We could&#8217;ve been avoided that by having eclipse installed and opened on the same project so that people could just alt+tab to their favorite IDE.  <br/>
In the same category: some people are used to querty, others to azerty. Perhaps a shortcut to switch keyboard layouts would&#8217;ve been useful.</p>

<h2>Conclusion</h2>

<p>I want to explicitly thank <a href="http://www.cegeka.be">Cegeka</a> for hosting and sponsoring this event for us. A nice atmosphere is the first requirement for a good dojo, and a nice atmosphere it was. Thanks!</p>

<p>If you have any remarks on the above, whether or not you were at the dojo, please leave a comment below, or send me a tweet. I strongly believe people learn a lot more from each other than they do from books, and holding a dojo is one of the ways to learn and have fun at the same time.</p>

<p>Also, Steve was right in his <a href="http://www.objectify.be/wordpress/?p=600">blog post</a>: Coders want to code. Which is why the Belgian Playframework User Group will be doing more code involving events in the future. Stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PlayBe Dojo: Play 2 & Java]]></title>
    <link href="http://ostia.be/blog/2012/09/18/playbe-first-dojo/"/>
    <updated>2012-09-18T23:28:00+02:00</updated>
    <id>http://ostia.be/blog/2012/09/18/playbe-first-dojo</id>
    <content type="html"><![CDATA[<p>Last year at Devoxx, I met Steve Chaloner (<a href="https://twitter.com/steve_objectify">@steve_objectify</a>), a Welsh expat in Belgium, and the first guy I met who had been using <a href="http://www.playframework.org">PlayFramework</a> professionally. Steve and his teammate managed to rewrite a struts 1 app that had been in development for some 4 years and that was ready for the bin. They used PlayFramework and rewrote the app in about a tenth of the original LOCs.  <br/>
Steve is also the author of Deadbolt, a widely used authorization module for both Play 1 and 2.</p>

<p>For those who don&#8217;t know it: Play is a full-stack web framework for the JVM that was built from the ground up by web developers who were tired of the bloated enterprizeness of building web apps in java and decided to do something about it. It&#8217;s got strongly typed templates, asset compilation, full statelessness, <em>real</em> hot reloading (it&#8217;s stateless, duh), and it&#8217;s part of the <a href="http://typesafe.com/stack">typesafe stack</a> of which <a href="http://www.theserverside.com/feature/Disruptive-forces-in-Java-Is-Scala-the-new-Spring-framework">some say</a> it&#8217;s a <em>disruptive force</em>, like Spring used to be some time ago.   <br/>
But my personal favorite is this: change code - hit F5 - do a demo. <br/>
In short, it&#8217;s the closest thing to PHP you can get as a java/JVM web dev, but without sacrificing your beloved strongly typed objects.</p>

<p>However, being a fanboy is not much fun if you&#8217;re the only one, even if you&#8217;re two.
So somewhere in spring - the season - Steve and I decided to get started with the <a href="http://www.play-be.org">Belgian Playframework User Group</a> (or <a href="https://twitter.com/#!/search/%23playbe">#playbe</a> for short). At this moment, the user group has about 30 members.</p>

<p>Now, a couple of months and beer sessions later, we&#8217;re very proud to announce PlayBe&#8217;s first <em>real</em> event: a <strong>Play2 Coding Dojo</strong>.  <br/>
A <a href="http://codingdojo.org">coding dojo</a> is a live coding event where everybody in the room is invited to participate. The format will be that of a <em>Randori Kata</em>, in which the group collectively builds an application, in our case using Play2 and Java.</p>

<p>What we&#8217;ll be building is still a bit of a secret, but I promise it&#8217;ll be something you can talk about at home, and maybe even use. <br/>
Also, did I mention that there&#8217;ll be food and drinks? (Thanks <a href="http://www.cegeka.be">Cegeka</a> for the hosting &amp; sponsoring!).</p>

<p>The Dojo takes place <strong>3 October, 2012 at 7pm</strong>, at the <strong>Cegeka Offices</strong> in <strong>Leuven (Belgium)</strong>.  <br/>
No PlayFramework experience is required, the only thing you should be familiar with is a keyboard and some Java. We won&#8217;t be doing <del>any</del> Scala.  <br/>
<a href="http://www.meetup.com/play-be/events/78580712/">Registration</a> is required, but free.</p>

<p>Hope to see you there!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extreme Programming Explained, without explaining]]></title>
    <link href="http://ostia.be/blog/2012/09/10/xp-explained-without-explaining/"/>
    <updated>2012-09-10T20:38:00+02:00</updated>
    <id>http://ostia.be/blog/2012/09/10/xp-explained-without-explaining</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been reading &#8216;Extreme Programming Explained - Embrace Change&#8217;, by Kent Beck (<a href="http://twitter.com/kentbeck">@kentbeck</a>). If you&#8217;ve read it too, you&#8217;re probably thinking: &#8220;it&#8217;s an old book, you should&#8217;ve read it years ago&#8221;, and I agree. But if you didn&#8217;t I can only say: you should.</p>

<p>Even if you&#8217;re working on a software development team but are no programmer; XP Explained does not contain any (as in &#8216;zero&#8217;) code samples, and it&#8217;s really about how to develop software as a team.</p>

<!-- more -->


<p>And what better way is there to inspire than by listing up some favorite quotes.</p>

<blockquote><p>XP is an opportunity [&#8230;] to realize that maybe you&#8217;ve been fine all along and just hanging with the wrong crowd.</p></blockquote>


<blockquote><p>In software development, &#8220;perfect&#8221; is a verb, not an adjective.</p></blockquote>


<blockquote><p>Quality is not a control variable.</p></blockquote>


<blockquote><p>When you&#8217;re sick, respect yourself and the rest of your team by resting and getting well. [&#8230;] Coming in sick doesn&#8217;t show commitment to work, because when you do you aren&#8217;t helping the team.</p></blockquote>


<blockquote><p>If you need to work on an idea alone, go do it. [&#8230;] When you&#8217;re done exploring, bring the resulting idea, not the code, back to the team.</p></blockquote>


<blockquote><p>Planning is a form of necessary waste.</p></blockquote>


<blockquote><p>In any plan, include some tasks that can be dropped if you get behind.</p></blockquote>


<blockquote><p>You can count on gravity. Software has few such certainties. The ten-minute build is as close as we get.</p></blockquote>


<blockquote><p>Any guess about what parts of the system *need* [&#8230;] to be tested introduces the risk of error.</p></blockquote>


<blockquote><p>Team programming isn&#8217;t a divide and conquer problem. It&#8217;s a divide, conquer, and integrate problem.</p></blockquote>


<blockquote><p>Test-first programming addresses many problems at once.</p></blockquote>


<blockquote><p>Change begins with awareness.</p></blockquote>


<blockquote><p>Trust your nose about what you need to improve next.</p></blockquote>


<blockquote><p>Maintain only the code and the tests as permanent artifacts.</p></blockquote>


<blockquote><p>Any gap between what is on a programmer&#8217;s desk and what is in production is a risk.</p></blockquote>


<blockquote><p>Planning in XP is an activity, not a phase.</p></blockquote>


<blockquote><p>A plan in XP is an example of what *could* happen, not a prediction of what *will* happen.</p></blockquote>


<blockquote><p>The hum of conversation is a sign of health. Silence is the sound of risk piling up.</p></blockquote>


<blockquote><p>Whichever units you use, hours or points, you will need to deal with the situation where actual results don&#8217;t match the plan.</p></blockquote>


<blockquote><p>In XP, testing is as important as programming.</p></blockquote>


<blockquote><p>Unfortunately, design in software has been shackled by metaphors from physical design activities.</p></blockquote>


<blockquote><p>Even if this is the umpteenth variation on a theme, there is always a better way to design the <br/>software.</p></blockquote>


<blockquote><p>The question is not *whether* to design, but *when* to design.</p></blockquote>


<blockquote><p>Far from &#8220;design nothing&#8221;, the XP strategy is &#8220;design always&#8221;.</p></blockquote>


<blockquote><p>I discover the need for design investment by spotting duplication.</p></blockquote>


<blockquote><p>If you are confronted with a big pile of mud, you can still begin improving the design. <br/>Why is Taylorism important for software engineering? No one walks around a development shop with a clipboard and a stopwatch.</p></blockquote>


<blockquote><p>&#8220;Continuous&#8221; learning is not continuous.</p></blockquote>


<blockquote><p>So the question, &#8220;Is my team extreme?&#8221; There isn&#8217;t a binary answer.</p></blockquote>


<p>And last but not least:</p>

<blockquote><p>The key to XP is integrity, acting in harmony with my true values.</p></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[To Test Or Not To Test]]></title>
    <link href="http://ostia.be/blog/2012/08/29/totestornottotest/"/>
    <updated>2012-08-29T23:04:00+02:00</updated>
    <id>http://ostia.be/blog/2012/08/29/totestornottotest</id>
    <content type="html"><![CDATA[<p>I recently decided to participate in a <a href="http://www.radrace.org/en/index.html">RAD race</a>, which will be held on 9 and 10 November. A RAD race is a competition in which teams (of two people in this case) build a real-life application in two days, using the language and tools of their choice. <!-- more -->   <br/>
&#8216;Rapid Application Development&#8217; is an old term whose meaning changed a couple of times over the course of history and even brings back memories of some IBM products *shivers*. But the fact that people still organise these events shows that we keep looking for better, cheaper, faster ways of building software. This  particular RAD race is being held for the 15th time, nuff said.</p>

<h2>The Problem</h2>

<p>On the technology side everything is clear. We&#8217;ll be building the app using <a href="http://www.playframework.org">PlayFramework</a> - only the single best way to build java web apps -, Java, Twitter Bootstrap, JQuery. We&#8217;ll be using Git for version management, and probably Eclipse on Windows. I&#8217;m still in negotiation with my teammate - let&#8217;s call him Matti - about the latter two. (If you ask him, we&#8217;re only negotiating about Git and perhaps a client-side mvc framework. In short: no question there ;-)).</p>

<p>But right in the middle of the excitement Matti and I felt when we decided to enter the competition, a question popped up: what about <strong>testing</strong>?   <br/>
What should we test? When should we be writing them? Should we be writing any tests at all?</p>

<p>For any real project, the answer would be simple: we&#8217;d be writing tests for everything, and we&#8217;d be writing them first.
But for the RAD race, things may be different.</p>

<h2>The funny thing about simulation games</h2>

<p>As a student, I regularily participated in stock exchange simulation games. That is, until I got annoyed enough by the fact that the winner was always the one who put all of his play money in one basket. Sure, for every winner, there were tens of people who used the same strategy and didn&#8217;t win, but neither did the ones who did build a life-like diversified portfolio.</p>

<p>The point is that every simulation game rule system has its flaws, and that participants can exploit these flaws in order to win. In most stock exchange simulation games, the flaw is that there&#8217;s no real money,  so in order to maximize profit, you take as much (fake) risk as you can.  <br/>
In a RAD race, the flaw is that your code won&#8217;t be running in production for years to come. There won&#8217;t be angry users asking for quick hacks on the phone, and no third or fourth generation junior developer who&#8217;s made responsible for maintaining the damned thing.</p>

<h2>TDD vs Time</h2>

<p>Does this mean that my teammate and I won&#8217;t be writing time-consuming tests during the RAD race? Hell no!</p>

<p>First, saying that TDD is time-consuming is like saying your bookkeeper is costing you money. If it is, you&#8217;re doing it wrong. <br/>
TDD is about producing time, namely time you won&#8217;t be spending looking for that annoying business blocking bug. Which will probably be during a weekend in your holiday or the one right before your code goes into production.  <br/>
And if your code doesn&#8217;t go into production, the bug will definitely bite you during the demo you&#8217;re giving to one of the RAD race judges.</p>

<p>Secondly, saying that writing tests is time-consuming implies a direct relationship between Lines Of Code and Time. Or that the productivity of a programmer can be measured in LOC, which is absurd, of course.</p>

<p>So we won&#8217;t be writing legacy code (aka code without tests) from the start of the RAD race. We will, however, adapt ourselves to the situation, <em>in casu</em> a simulation game situation.  <br/>
We&#8217;ll plan to TDD the business logic, especially if there&#8217;s complex algorithms involved. And we&#8217;ll have UI tests that cover at least every page in the app, but probably without checking every possible corner case.     <br/>
But I&#8217;m still negotiating on that with Matti.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First!]]></title>
    <link href="http://ostia.be/blog/2012/08/28/first/"/>
    <updated>2012-08-28T13:43:00+02:00</updated>
    <id>http://ostia.be/blog/2012/08/28/first</id>
    <content type="html"><![CDATA[<pre><code>println("Hello World!")
</code></pre>

<p>First blog post, yay!</p>

<p>Now with that out of the way, go ahead and read the second post. That&#8217;ll be a more interesting, I promise.</p>
]]></content>
  </entry>
  
</feed>
