<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ostia]]></title>
  <link href="http://ostia.be/atom.xml" rel="self"/>
  <link href="http://ostia.be/"/>
  <updated>2013-02-27T22:35:53+01:00</updated>
  <id>http://ostia.be/</id>
  <author>
    <name><![CDATA[Ben Verbeken]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Play 1 vs Play 2: Hold Your Horses]]></title>
    <link href="http://ostia.be/blog/2013/02/27/play-1-vs-play-2-hold-your-horses/"/>
    <updated>2013-02-27T21:48:00+01:00</updated>
    <id>http://ostia.be/blog/2013/02/27/play-1-vs-play-2-hold-your-horses</id>
    <content type="html"><![CDATA[<p>I work for Cegeka, a company that&#8217;s proud of not being the regular type of body-shopping consulting firm. Instead, they put together teams of highly skilled, agile-minded people and sell those to clients as a whole. Needless to say I like it there.</p>

<p>Self-improvement is an important part in their philosophy, and in order to do that Cegeka encourages people to participate in so-called <em>Competence Centers</em>. These are groups of people of the same profession - Spotify would call them <a href="http://blog.crisp.se/2012/11/14/henrikkniberg/scaling-agile-at-spotify"><em>guilds</em></a> - who gather a full day about every two months. Kind of like a playground to learn about technology, if you will.  <br/>
Since about a year, I&#8217;ve been in charge of the <a href="http://www.playframework.com/">Playframework</a> competence center, whose goal it is to investigate how well Play fits the <a href="http://agilemanifesto.org/">agile</a>-<a href="http://en.wikipedia.org/wiki/Test-driven_development">TDD</a>-<a href="http://www.infoq.com/presentations/model-to-work-evans">DDD</a> way of working, and whether the playframework elevator pitch holds in a more or less real-life project.</p>

<!-- more -->


<p><em>(Heads up: the following is the reflection of what the competence center members thought as a team, so they are not (exclusively) my own thoughts.)</em></p>

<h2>What we did</h2>

<p>We held 6 sessions throughout the year, during which we built an application from scratch. The app, <em>Hold Your Horses</em> (<a href="https://github.com/cegekaplaycc/">https://github.com/cegekaplaycc/</a>), is a horse race simulation game in which players can buy and sell horses, build stables, buy food, hire trainers, participate in races, win money, you name it.  <br/>
In fact, we built <em>Hold Your Horses</em> twice, and here&#8217;s the interesting part: we evaluated both Play 1 (4 sessions) and Play 2 with java (2 sessions).   <br/>
When we held the first session back in January 2012, Play 2 had been announced and an RC was available, but the documentation wasn&#8217;t there yet. So we decided to go with Play 1 for starters and to switch to Play 2 after a few sessions. This would give us the opportunity to compare the two and decide for ourselves.</p>

<p>Development-process-wise, we tried to keep as close as possible to the agile way of working we&#8217;re used to at Cegeka: story cards and mock-ups were prepared beforehand (<a href="https://trello.com/">Trello</a> rocks, btw!), these stories would get picked up by a pair, who&#8217;d implement the story in a test-driven way. However, we stayed away from estimates and story point tracking, which would&#8217;ve just increased the overhead.</p>

<h2>In retrospect</h2>

<p>Last week at the end of the sixth session, we decided to do a retrospective, being good agileists and all. The main question was: what do we think of Play, and where do we go from here.</p>

<p>First we did a little SWOT analysis: I asked everyone to write down what they feel are Play&#8217;s strengths, weaknesses, opportunities and threats on post-its. Surprise or not, we mostly agreed. Here&#8217;s what the team wrote down (most of the items are for Play in general, some are about Play 1 and Play 2 specifics):</p>

<p><strong> Strengths: </strong></p>

<ul>
<li>Play is innovative</li>
<li>easy to deploy</li>
<li>No servlets, really fast setup</li>
<li>Fast setup (5x)</li>
<li>No redeploy necessary, hit F5 and see result</li>
<li>Hot deploy</li>
<li>Play is stateless (4x)</li>
<li>easy to deploy in the cloud (Heroku)</li>
<li>Play app structure is easy to understand, it&#8217;s easy to find your way</li>
<li>Templating system is fun for easy things, but we haven&#8217;t built any really complicated screens yet</li>
<li>Play1 specific

<ul>
<li>flat learning curve</li>
<li>speed of development</li>
</ul>
</li>
<li>Play2 specific

<ul>
<li>the routes file is compiled</li>
</ul>
</li>
</ul>


<p><strong> Weaknesses: </strong></p>

<ul>
<li>technical problems, things that don&#8217;t work as they are supposed to</li>
<li>Documentation (3x)</li>
<li>Things go quickly, until you hit a problem. Googleing for a solution doesn&#8217;t help</li>
<li>Play vs Eclipse</li>
<li>using play results in badly tested code</li>
<li>testability, running tests from within the IDE != easy. Result: hard to do TDD</li>
<li>Testing != easy. Perhaps to do with our lack of knowledge?</li>
<li>About Play 1

<ul>
<li>auto-magical stuff (enhancers etc)</li>
</ul>
</li>
<li>About Play 2

<ul>
<li>Sbt != easy</li>
<li>bad java support in Play 2</li>
</ul>
</li>
</ul>


<p><strong> Opportunities: </strong></p>

<ul>
<li>get to know HTML(5) and http better</li>
<li>It&#8217;s really different from what we&#8217;re used to</li>
<li>Let&#8217;s revive Play 1, go back to easy and fast of Play 1</li>
<li>Play 2 + Scala = a hype. Enterprise Java killer?</li>
</ul>


<p><strong> Threats: </strong></p>

<ul>
<li>Too (?) innovative</li>
<li>Play 2 core is written in Scala</li>
<li>EBean is not simple and has bugs (e.g. getter and setter needed, even for public id field)</li>
<li>Play 2 templates: steep learning curve</li>
<li>Play 2: too many new things to be easy to learn</li>
<li>Java devs are left in the cold</li>
<li>Play 1 is dead, Play 2 for java != Ok (both a threat as an opportunity)</li>
<li>No best practices concerning packaging and layering. Play is only suited for small projects?</li>
</ul>


<h2>What we think</h2>

<p>We know we like Play 1 a lot. Being a java framework, it&#8217;s right in our comfort zone, and we can read, understand and debug through the framework code.  <br/>
We love the statelessness of the framework; development is really fast thanks to hit-F5-and-it&#8217;s-there, and it makes it easy to deploy to the cloud. Furthermore, the learning curve is flat, because of the simple conventions and known technologies under the hood (hibernate, for one). <br/>
On the testing side, things could be improved. Either we don&#8217;t really understand how we should test a stateless web app (lack of knowledge), or Play 1 lacks the tools to do so. The fact that there&#8217;s so much static things going on doesn&#8217;t help, but not a major hurdle.</p>

<p>Play 2 is a different story. The main ideas we knew from Play 1 are there (statelesness, the routes file, the MVC approach), but there are just too many things to learn to make it easy to use right away. We didn&#8217;t like EBean, and struggled with the compiled templates and sbt, both of which feel very un-java-like (I hear you thinking: Duh, of course they do. More on that below ;)).</p>

<p>All in all, we now know what Playframework can do for us, there&#8217;s definitely value there, but Play 2 with Java just doesn&#8217;t feel right to us. <br/>
Or, as someone put it: &#8220;We should fork Play 1&#8221; (which btw has been <a href="http://www.github.com/yalpframework/yalp">done</a> by now).</p>

<h2>Where we&#8217;re heading</h2>

<p>One question remains, though: until now, we used Java. Is our gut feeling correct; is Play 2 a better fit for Scala than it is for Java?  <br/>
Of course there&#8217;s only one way to find out, so we&#8217;re going to build yet another app, using Play 2 + Scala this time. (Might not be <em>Hold Your Horses</em> though, we&#8217;re sick of horses by now).</p>

<p>We know it&#8217;s going to be tough; most of us have only touched scala briefly through the <a href="https://www.coursera.org/course/progfun">Coursera</a> course, or not at all. But we wouldn&#8217;t be good developers if we weren&#8217;t ready to step out of our comfort zone, now would we. <br/>
On the other hand, it&#8217;s going to be fun too, we&#8217;re planning a <a href="http://scalatron.github.com/">scalatron</a> battle as we speak.</p>

<p>What do you think? Are there hard and easier ways to learn a language like Scala? Things we should/shouldn&#8217;t do?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Legacy code, an epyphany]]></title>
    <link href="http://ostia.be/blog/2013/01/29/legacy-code/"/>
    <updated>2013-01-29T08:14:00+01:00</updated>
    <id>http://ostia.be/blog/2013/01/29/legacy-code</id>
    <content type="html"><![CDATA[<p>Until recently, I used the term <em>legacy code</em> for bad, ancient code that had been written ten consultants ago, for code that has stopped evolving because it&#8217;s too complicated and critical that nobody dares to take responsibility, for code that came from someone else, you get the idea. We&#8217;ve all seen that code and we all love to hate that consultant, don&#8217;t we.</p>

<p>And then I learned about another definition of legacy code, one that Michael Feathers (<a href="https://twitter.com/mfeathers">@mfeathers</a>) introduced in his book, <a href="http://www.informit.com/store/working-effectively-with-legacy-code-9780131177055">Working Effectively with Legacy Code</a>:</p>

<blockquote><p>legacy code is code without tests.</p></blockquote>


<p>Nice, short and catchy, but until yesterday I didn&#8217;t really understand this is indeed a very good definition of legacy code.</p>

<!-- more -->


<p>I&#8217;m working on a large scale web application, in a company with multiple teams, each of which is responsible for a single application.<br/>
One of the guys on my team, let&#8217;s call him Alex, had been working on a restful web service api that would be called by one of those other teams. Couple of days work, the story card moved from TODO over DOING to DONE on our kanban board, story done.</p>

<p>Fast forward a couple of weeks. A guy from the other team, Bart, comes in and tells me there&#8217;s something wrong with the webservice: in a specific case, our code wouldn&#8217;t reply with a <em>bad request</em>, but an <em>ok</em>. A bug. No biggie, but a bug nevertheless. I go look in the code, to only find production code. Not a single test there.</p>

<p><em>(Before going on, an important note: I&#8217;m not blaming Alex. Nobody writes bugfree code. In Alex&#8217;s defence, this web service api is a thin layer on top of the core application and thin layers should be trivial. So I understand why writing tests in this case seem like a waste of time.)</em></p>

<p>Back to the bug. I have a couple of options here.</p>

<ul>
<li>I could <strong>delegate</strong> the bug to Alex, so that it&#8217;s not my problem anymore. However, Alex is part of the team today, but what if another bug bites when he&#8217;s not anymore?</li>
<li>I could debug through the code, until I find the bug. <strong>Just fix it</strong> and be done with it. But how do I know I don&#8217;t introduce a new bug? How do I make sure I fixed the bug?</li>
<li>Better, I could <strong>write a single test</strong> that reproduces this bug, and then fix it. However,  we&#8217;d still rely on the other team&#8217;s testing to know whether our api is any good. Furthermore, it could be hard to write a single failing test; perhaps the code as it is now is not very testable, given that it had been written without tests in the first place.</li>
<li>I could treat our web service api like a nuclear reactor: build a concrete shield <strong>wall of solid integration tests</strong> around it, without touching the code. Then refactor, and then write the test that reproduces the bug. But that would be very time-consuming.</li>
</ul>


<p>All of these options above are flawed to some degree. Either they involve unprofessional behaviour, or I need to spend more time then I would like to solve the bug.</p>

<p>The point is that I have the exact same options of responding to this particular bug as I do for a bug in bad code that&#8217;s been there for years. It doesn&#8217;t matter when the code was written or whether the guy who wrote it is still on the team or not, untested code is a black box.  <br/>
And if the cure is the same, it must be the same disease, the rest is just politics and religion.</p>

<p>Hence: legacy code is untested code and untested code is legacy code, QED.</p>

<p><em>On a side note: Michael Feathers will be doing a keynote at the <a href="https://twitter.com/JoyOfCoding">@JoyOfCoding</a> conference in Rotterdam (The Netherlands) soon. I doubt I&#8217;ll be able to make it there, my family&#8217;s got a major release coming up. But do check it out, <a href="http://joyofcoding.org">the program</a> is well worth it!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devoxx University highlights]]></title>
    <link href="http://ostia.be/blog/2012/11/14/devoxx-university/"/>
    <updated>2012-11-14T12:49:00+01:00</updated>
    <id>http://ostia.be/blog/2012/11/14/devoxx-university</id>
    <content type="html"><![CDATA[<p>It&#8217;s that time of the year again: Devoxx, Antwerp, the largest independent all things JVM conference. Not &#8216;Java&#8217; anymore, because obviously there are many things going on, and I didn&#8217;t attend a single java(-only) flavoured talk in my whole first day.<br/>
Some highlights.</p>

<!-- more -->


<h1>Day 1</h1>

<h2>PlayFramework</h2>

<p>In the morning: the <strong>Playframework crash course</strong>. What else. <br/>
First, <a href="https://twitter.com/pk11">Peter Hausel</a> touched a lot of interesting topics for experienced play developers (love the splitting up of routes files in the upcoming Play 2.1!). However, I do think his talk was scheduled a bit oddly by the organisation. His other talk in the late afternoon which I attended as well, was an half-hour demo of how to build a Play 2 app from the ground up, and my feeling is that more people would&#8217;ve enjoyed his first talk after seeing his second.
During the second part of the crash course <a href="https://twitter.com/sadache">Sadek Drobi</a> and <a href="https://twitter.com/guillaumebort">Guillaume Bort</a> presented Play 2 as a tool for realtime web (RTW) programming. I&#8217;ve seen them giving talks a couple of times now, and it amazes me how they keep putting new things in their presentations.</p>

<h2>Ceylon Lab</h2>

<p>In the afternoon, I participated in the <strong>Write your first Ceylon programme with the language authors</strong> (Emmanuel Bernard, Gavin King &amp; Stéphane Epardaud). Glad I did, Ceylon - which is pronounced more as <em>salon</em> than as <em>say lon</em> - has some interesting features, but most interesting is the type system. with features like <em>union types</em>, which allow you to write things like</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void doSomething(Integer|String aVar){
</span><span class='line'>  if (is Integer aVar){
</span><span class='line'>      // here aVar is of type Integer
</span><span class='line'>  } else if (is String aVar){
</span><span class='line'>      // here aVar is if type String
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Not sure how dangerous this is in real life projects, but at least it&#8217;s an interesting idea to think about.</p>

<p>Personal musing: I like that the ceylon guys used Playframework to <em>Ceylon Herd</em>, which is what the Ceylon module repository is called.</p>

<h2>Scala Enthusiasts Gathering (aka The Scala Bof)</h2>

<p>Yet another highlight on the first day was the Scala enthusiasts gathering. To keep things light, Renato Cavalcanti (<a href="https://twitter.com/renatocaval">@renatocaval</a>) and his team decided to make it a panel discussion with some high profile people from the scala world.
It wasn&#8217;t a really focused discussion, but that didn&#8217;t matter as it allowed to cover lots of different topics.
And there was good belgian quality beer, thanks for that, <a href="https://twitter.com/be_scala">@be_scala</a>!</p>

<h1>Day 2</h1>

<h2>More Scala</h2>

<p>I planned to go to the OpenJDK bugathon, but I came in way too late thanks to belgian traffic. <br/>
so I missed the OpenJDK Hack Session I planned to attend (no java, again, this is becoming a pattern) and I went to follow the rest of <strong>Scala advanced concepts and best practices</strong> by Dick Wall and Bill Venners.
A couple of quotes:</p>

<blockquote><p>Yes, it&#8217;s an evil premature optimization, but it&#8217;s a neat one.</p><footer><strong>Dick Wall</strong> <cite>About Using &#8220;X & 1&#8221; Instead of ] &#8220;X % 2&#8221; to Check Whether a Number Is Even or Not</cite></footer></blockquote>




<blockquote><p>This is the zen-slide</p></blockquote>




<blockquote><p>Syntax coloring in IDE: turn your vars red</p></blockquote>


<h2>AngularJs</h2>

<p>In the afternoon: the AngularJs lab. Awesome technology, I&#8217;m definitely going to check that out for an upcoming project we&#8217;re planning. (Right, Matti? :))</p>

<h1>Conclusion</h1>

<p>That&#8217;s it for the Devoxx University. Two down, three to go. I&#8217;m looking forward to tonight&#8217;s PlayBe meetup, 7pm at the Axxess Café, right next to the metropolis main entrance.  <br/>
Hope to see you there!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[play 2 JUnit runner]]></title>
    <link href="http://ostia.be/blog/2012/10/20/play-2-test-runner/"/>
    <updated>2012-10-20T17:38:00+02:00</updated>
    <id>http://ostia.be/blog/2012/10/20/play-2-test-runner</id>
    <content type="html"><![CDATA[<p>I like Play 2. It&#8217;s simply the best thing that happened on the JVM since, well, Play 1 :)</p>

<p>One thing bothers me though: testing is still a bit of a PITA (at least in Java). Sure, Play 2 has webdriver support, you don&#8217;t have to extend <code>UnitTest</code> and <code>FunctionalTest</code> anymore and you can unit-test templates. But, instead of extending base test classes I have to call a bunch of static utility methods on the <code>play.test.Helpers</code> class.</p>

<p>For example, to write a test that runs inside an application (i.e. has access to its environment), I have to write the following:</p>

<script src="https://gist.github.com/3917715.js?file=BeforeOrganisationTest.java"></script>


<p>In his excellent <a href="http://blog.matthieuguillermin.fr/2012/03/unit-testing-tricks-for-play-2-0-and-ebean/">blog post</a>, Matthieu Guillermin (<a href="https://twitter.com/MGuillermin">@mguillermin</a>) shows a solution for this problem (amongs others) by creating an abstract base class that contains the boilerplate code.
This works very well, but I prefer composition over inheritance, so I&#8217;m using a custom JUnit runner for this.</p>

<script src="https://gist.github.com/3917715.js?file=PlayJUnitRunner.java"></script>


<p>Then, you can use this runner in an <code>@runWith</code> annotation, and just write your test code without wrapping it in a <code>Runnable</code>, like so:</p>

<script src="https://gist.github.com/3917715.js?file=AfterOrganisationTest.java"></script>


<p>Until next time!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dojo]]></title>
    <link href="http://ostia.be/blog/2012/10/04/dojo/"/>
    <updated>2012-10-04T13:43:00+02:00</updated>
    <id>http://ostia.be/blog/2012/10/04/dojo</id>
    <content type="html"><![CDATA[<p>The Belgian Playframework User Group held it&#8217;s first coding event last Wednesday: a Coding Dojo.   <br/>
The ingrediënts: 17 nice people, a decent sized room, food and drinks, and Playframework of course.</p>

<p>A <a href="http://www.codingdojo.org">Coding Dojo</a> is an event where people gather to code and learn together. The goal of a dojo is exactly that: to code and learn, nothing more. It&#8217;s about the journey, not the destination.   <br/>
Ours was a <em>Randori Kata</em>, a kind of dojo where the whole group works together to build an application in a couple of hours, by pair programming on stage. We changed that format just a wee bit, more on that further down in this post.</p>

<!-- more -->


<h2>The Application</h2>

<p>The application we built is called QuickQuizz, a quiz engine for Twitter. The idea is simple: Quickquizz allows quizmasters to write questions and the expected answer. It tweets the questions on a special <a href="http://twitter.com/quickquizz">@quickquizz</a> account, and people can answer these questions by replying to the tweet. Quickquizz then fetches the answers (asynchronously, using <a href="http://akka.io">Akka</a>), scores them and shows an overview of all quizzers and their scores on a simple overview page.</p>

<p>We managed to get most of this done in about three hours (start up and break included). The resulting code is on github (<a href="http://github.com/playbe/quickquizz-dojo">http://github.com/playbe/quickquizz-dojo</a>).   <br/>
But please remember, if you decide to take a peek at the code, that it&#8217;s all about the <em>journey</em>, not the destination :).</p>

<h2>The Journey</h2>

<p>The original idea was to have two people pair programming on a laptop in front of the room, with the audience following their progress on a big screen behind them, and to switch one of the pair every ten minutes.
But when I got to the cegeka offices in the afternoon to prepare, I noticed that the wireless keyboard and mouse I brought actually worked from everywhere in the room, with the laptop open in front. So instead of moving the participants every ten minutes, we decided to move around the mouse and keyboard.</p>

<p>That was a game changer. People did not have to get on the stage, they could literally work from within the group. The rest of us, who didn&#8217;t have the keyboard, were not the <em>audience</em>, but actively participated in helping the keyboard holder.  <br/>
Also, the fact that we were sitting around tables in a big U-shape helped the interaction between the participants.</p>

<h2>Lessons Learned</h2>

<p>I think the dojo was a success. We gathered play enthusiasts, wrote some cool code, and had fun while doing that. However, there are some things I want to write down for future reference; things that can be improved.</p>

<h3>Make the coder order unpredictable</h3>

<p>The keyboard was passed along from left to right (or right to left, depending on your viewpoint). Result was that everything became quite predictable: people at the end of the U knew they wouldn&#8217;t have to code before some time, and the ones who coded in the beginning of the evening knew their turn was over.  <br/>
Perhaps we need to make it a bit less predictable (randomize?) next time.</p>

<h3>The First coder</h3>

<p>We deliberately chose to start with an empty page, to show how easy it is with Play to start a new project.        <br/>
However, we should&#8217;ve made sure the first guy at the keyboard had already played with Play 2 before at least a bit. <code>play new quickquizz</code> is easy, but right after that, you need to start using the framework. And that&#8217;s a hard thing to do if you never used it.
Btw: Sorry Tim, next time you&#8217;re not the first one, I promise ;)</p>

<h3>IDE Woes</h3>

<p>I&#8217;m an IntelliJ fan, I&#8217;ve been one since version 5 or so. However, I respect other people&#8217;s choice. Even if there really is no choice :)
The thing is, during the dojo, some people struggled with the keyboard shortcuts. We could&#8217;ve been avoided that by having eclipse installed and opened on the same project so that people could just alt+tab to their favorite IDE.  <br/>
In the same category: some people are used to querty, others to azerty. Perhaps a shortcut to switch keyboard layouts would&#8217;ve been useful.</p>

<h2>Conclusion</h2>

<p>I want to explicitly thank <a href="http://www.cegeka.be">Cegeka</a> for hosting and sponsoring this event for us. A nice atmosphere is the first requirement for a good dojo, and a nice atmosphere it was. Thanks!</p>

<p>If you have any remarks on the above, whether or not you were at the dojo, please leave a comment below, or send me a tweet. I strongly believe people learn a lot more from each other than they do from books, and holding a dojo is one of the ways to learn and have fun at the same time.</p>

<p>Also, Steve was right in his <a href="http://www.objectify.be/wordpress/?p=600">blog post</a>: Coders want to code. Which is why the Belgian Playframework User Group will be doing more code involving events in the future. Stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PlayBe Dojo: Play 2 & Java]]></title>
    <link href="http://ostia.be/blog/2012/09/18/playbe-first-dojo/"/>
    <updated>2012-09-18T23:28:00+02:00</updated>
    <id>http://ostia.be/blog/2012/09/18/playbe-first-dojo</id>
    <content type="html"><![CDATA[<p>Last year at Devoxx, I met Steve Chaloner (<a href="https://twitter.com/steve_objectify">@steve_objectify</a>), a Welsh expat in Belgium, and the first guy I met who had been using <a href="http://www.playframework.org">PlayFramework</a> professionally. Steve and his teammate managed to rewrite a struts 1 app that had been in development for some 4 years and that was ready for the bin. They used PlayFramework and rewrote the app in about a tenth of the original LOCs.  <br/>
Steve is also the author of Deadbolt, a widely used authorization module for both Play 1 and 2.</p>

<p>For those who don&#8217;t know it: Play is a full-stack web framework for the JVM that was built from the ground up by web developers who were tired of the bloated enterprizeness of building web apps in java and decided to do something about it. It&#8217;s got strongly typed templates, asset compilation, full statelessness, <em>real</em> hot reloading (it&#8217;s stateless, duh), and it&#8217;s part of the <a href="http://typesafe.com/stack">typesafe stack</a> of which <a href="http://www.theserverside.com/feature/Disruptive-forces-in-Java-Is-Scala-the-new-Spring-framework">some say</a> it&#8217;s a <em>disruptive force</em>, like Spring used to be some time ago.   <br/>
But my personal favorite is this: change code - hit F5 - do a demo. <br/>
In short, it&#8217;s the closest thing to PHP you can get as a java/JVM web dev, but without sacrificing your beloved strongly typed objects.</p>

<p>However, being a fanboy is not much fun if you&#8217;re the only one, even if you&#8217;re two.
So somewhere in spring - the season - Steve and I decided to get started with the <a href="http://www.play-be.org">Belgian Playframework User Group</a> (or <a href="https://twitter.com/#!/search/%23playbe">#playbe</a> for short). At this moment, the user group has about 30 members.</p>

<p>Now, a couple of months and beer sessions later, we&#8217;re very proud to announce PlayBe&#8217;s first <em>real</em> event: a <strong>Play2 Coding Dojo</strong>.  <br/>
A <a href="http://codingdojo.org">coding dojo</a> is a live coding event where everybody in the room is invited to participate. The format will be that of a <em>Randori Kata</em>, in which the group collectively builds an application, in our case using Play2 and Java.</p>

<p>What we&#8217;ll be building is still a bit of a secret, but I promise it&#8217;ll be something you can talk about at home, and maybe even use. <br/>
Also, did I mention that there&#8217;ll be food and drinks? (Thanks <a href="http://www.cegeka.be">Cegeka</a> for the hosting &amp; sponsoring!).</p>

<p>The Dojo takes place <strong>3 October, 2012 at 7pm</strong>, at the <strong>Cegeka Offices</strong> in <strong>Leuven (Belgium)</strong>.  <br/>
No PlayFramework experience is required, the only thing you should be familiar with is a keyboard and some Java. We won&#8217;t be doing <del>any</del> Scala.  <br/>
<a href="http://www.meetup.com/play-be/events/78580712/">Registration</a> is required, but free.</p>

<p>Hope to see you there!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extreme Programming Explained, without explaining]]></title>
    <link href="http://ostia.be/blog/2012/09/10/xp-explained-without-explaining/"/>
    <updated>2012-09-10T20:38:00+02:00</updated>
    <id>http://ostia.be/blog/2012/09/10/xp-explained-without-explaining</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been reading &#8216;Extreme Programming Explained - Embrace Change&#8217;, by Kent Beck (<a href="http://twitter.com/kentbeck">@kentbeck</a>). If you&#8217;ve read it too, you&#8217;re probably thinking: &#8220;it&#8217;s an old book, you should&#8217;ve read it years ago&#8221;, and I agree. But if you didn&#8217;t I can only say: you should.</p>

<p>Even if you&#8217;re working on a software development team but are no programmer; XP Explained does not contain any (as in &#8216;zero&#8217;) code samples, and it&#8217;s really about how to develop software as a team.</p>

<!-- more -->


<p>And what better way is there to inspire than by listing up some favorite quotes.</p>

<blockquote><p>XP is an opportunity [&#8230;] to realize that maybe you&#8217;ve been fine all along and just hanging with the wrong crowd.</p></blockquote>


<blockquote><p>In software development, &#8220;perfect&#8221; is a verb, not an adjective.</p></blockquote>


<blockquote><p>Quality is not a control variable.</p></blockquote>


<blockquote><p>When you&#8217;re sick, respect yourself and the rest of your team by resting and getting well. [&#8230;] Coming in sick doesn&#8217;t show commitment to work, because when you do you aren&#8217;t helping the team.</p></blockquote>


<blockquote><p>If you need to work on an idea alone, go do it. [&#8230;] When you&#8217;re done exploring, bring the resulting idea, not the code, back to the team.</p></blockquote>


<blockquote><p>Planning is a form of necessary waste.</p></blockquote>


<blockquote><p>In any plan, include some tasks that can be dropped if you get behind.</p></blockquote>


<blockquote><p>You can count on gravity. Software has few such certainties. The ten-minute build is as close as we get.</p></blockquote>


<blockquote><p>Any guess about what parts of the system *need* [&#8230;] to be tested introduces the risk of error.</p></blockquote>


<blockquote><p>Team programming isn&#8217;t a divide and conquer problem. It&#8217;s a divide, conquer, and integrate problem.</p></blockquote>


<blockquote><p>Test-first programming addresses many problems at once.</p></blockquote>


<blockquote><p>Change begins with awareness.</p></blockquote>


<blockquote><p>Trust your nose about what you need to improve next.</p></blockquote>


<blockquote><p>Maintain only the code and the tests as permanent artifacts.</p></blockquote>


<blockquote><p>Any gap between what is on a programmer&#8217;s desk and what is in production is a risk.</p></blockquote>


<blockquote><p>Planning in XP is an activity, not a phase.</p></blockquote>


<blockquote><p>A plan in XP is an example of what *could* happen, not a prediction of what *will* happen.</p></blockquote>


<blockquote><p>The hum of conversation is a sign of health. Silence is the sound of risk piling up.</p></blockquote>


<blockquote><p>Whichever units you use, hours or points, you will need to deal with the situation where actual results don&#8217;t match the plan.</p></blockquote>


<blockquote><p>In XP, testing is as important as programming.</p></blockquote>


<blockquote><p>Unfortunately, design in software has been shackled by metaphors from physical design activities.</p></blockquote>


<blockquote><p>Even if this is the umpteenth variation on a theme, there is always a better way to design the <br/>software.</p></blockquote>


<blockquote><p>The question is not *whether* to design, but *when* to design.</p></blockquote>


<blockquote><p>Far from &#8220;design nothing&#8221;, the XP strategy is &#8220;design always&#8221;.</p></blockquote>


<blockquote><p>I discover the need for design investment by spotting duplication.</p></blockquote>


<blockquote><p>If you are confronted with a big pile of mud, you can still begin improving the design. <br/>Why is Taylorism important for software engineering? No one walks around a development shop with a clipboard and a stopwatch.</p></blockquote>


<blockquote><p>&#8220;Continuous&#8221; learning is not continuous.</p></blockquote>


<blockquote><p>So the question, &#8220;Is my team extreme?&#8221; There isn&#8217;t a binary answer.</p></blockquote>


<p>And last but not least:</p>

<blockquote><p>The key to XP is integrity, acting in harmony with my true values.</p></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[To Test Or Not To Test]]></title>
    <link href="http://ostia.be/blog/2012/08/29/totestornottotest/"/>
    <updated>2012-08-29T23:04:00+02:00</updated>
    <id>http://ostia.be/blog/2012/08/29/totestornottotest</id>
    <content type="html"><![CDATA[<p>I recently decided to participate in a <a href="http://www.radrace.org/en/index.html">RAD race</a>, which will be held on 9 and 10 November. A RAD race is a competition in which teams (of two people in this case) build a real-life application in two days, using the language and tools of their choice. <!-- more -->   <br/>
&#8216;Rapid Application Development&#8217; is an old term whose meaning changed a couple of times over the course of history and even brings back memories of some IBM products *shivers*. But the fact that people still organise these events shows that we keep looking for better, cheaper, faster ways of building software. This  particular RAD race is being held for the 15th time, nuff said.</p>

<h2>The Problem</h2>

<p>On the technology side everything is clear. We&#8217;ll be building the app using <a href="http://www.playframework.org">PlayFramework</a> - only the single best way to build java web apps -, Java, Twitter Bootstrap, JQuery. We&#8217;ll be using Git for version management, and probably Eclipse on Windows. I&#8217;m still in negotiation with my teammate - let&#8217;s call him Matti - about the latter two. (If you ask him, we&#8217;re only negotiating about Git and perhaps a client-side mvc framework. In short: no question there ;-)).</p>

<p>But right in the middle of the excitement Matti and I felt when we decided to enter the competition, a question popped up: what about <strong>testing</strong>?   <br/>
What should we test? When should we be writing them? Should we be writing any tests at all?</p>

<p>For any real project, the answer would be simple: we&#8217;d be writing tests for everything, and we&#8217;d be writing them first.
But for the RAD race, things may be different.</p>

<h2>The funny thing about simulation games</h2>

<p>As a student, I regularily participated in stock exchange simulation games. That is, until I got annoyed enough by the fact that the winner was always the one who put all of his play money in one basket. Sure, for every winner, there were tens of people who used the same strategy and didn&#8217;t win, but neither did the ones who did build a life-like diversified portfolio.</p>

<p>The point is that every simulation game rule system has its flaws, and that participants can exploit these flaws in order to win. In most stock exchange simulation games, the flaw is that there&#8217;s no real money,  so in order to maximize profit, you take as much (fake) risk as you can.  <br/>
In a RAD race, the flaw is that your code won&#8217;t be running in production for years to come. There won&#8217;t be angry users asking for quick hacks on the phone, and no third or fourth generation junior developer who&#8217;s made responsible for maintaining the damned thing.</p>

<h2>TDD vs Time</h2>

<p>Does this mean that my teammate and I won&#8217;t be writing time-consuming tests during the RAD race? Hell no!</p>

<p>First, saying that TDD is time-consuming is like saying your bookkeeper is costing you money. If it is, you&#8217;re doing it wrong. <br/>
TDD is about producing time, namely time you won&#8217;t be spending looking for that annoying business blocking bug. Which will probably be during a weekend in your holiday or the one right before your code goes into production.  <br/>
And if your code doesn&#8217;t go into production, the bug will definitely bite you during the demo you&#8217;re giving to one of the RAD race judges.</p>

<p>Secondly, saying that writing tests is time-consuming implies a direct relationship between Lines Of Code and Time. Or that the productivity of a programmer can be measured in LOC, which is absurd, of course.</p>

<p>So we won&#8217;t be writing legacy code (aka code without tests) from the start of the RAD race. We will, however, adapt ourselves to the situation, <em>in casu</em> a simulation game situation.  <br/>
We&#8217;ll plan to TDD the business logic, especially if there&#8217;s complex algorithms involved. And we&#8217;ll have UI tests that cover at least every page in the app, but probably without checking every possible corner case.     <br/>
But I&#8217;m still negotiating on that with Matti.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First!]]></title>
    <link href="http://ostia.be/blog/2012/08/28/first/"/>
    <updated>2012-08-28T13:43:00+02:00</updated>
    <id>http://ostia.be/blog/2012/08/28/first</id>
    <content type="html"><![CDATA[<pre><code>println("Hello World!")
</code></pre>

<p>First blog post, yay!</p>

<p>Now with that out of the way, go ahead and read the second post. That&#8217;ll be a more interesting, I promise.</p>
]]></content>
  </entry>
  
</feed>
