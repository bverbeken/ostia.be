---
layout: post
title: "RAD race"
date: 2012-08-28 13:52
comments: true
categories: 
- Play!
- RAD
published: false
---


I just decided to participate in a <a href="http://www.radrace.org/en/index.html">RAD race</a>, which will be held on 9 and 10 November.     
'Rapid Application Development' is an old term whose meaning changed a couple of times over the course of history (and even brings back memories of some IBM products *shivers*). This particular RAD race is being organized for the 15th time this year, nuff said.    
But the fact that people still organise these events shows that we keep looking for better, cheaper, faster ways of building software.   

The Problem
-----------

On the technology side everything is clear. We'll be building the app using PlayFramework (more on that in future posts), Java, Twitter Bootstrap, JQuery. We'll be using Git for version management, and probably eclipse and windows. I'm still in negotiation with my teammate about the latter two and if you ask him, we're only negotiating about Git and perhaps a client-side mvc framework like ember.js.     
In short: no question there ;) 

The real problem is this: what about testing?    
How many tests should we write? What type of tests should we write? What not? Should we be RAD-racing TestDrivenly (tm) at all? 

The funny thing about simulation games ...
-------------------------------------------
... is that every simulation game rule system has its flaws. And experienced players have no trouble finding them. 

When I was studying economics, I regularily participated in stock-exchange simulation games. That is, until I got annoyed enough by the fact that the winner was always the one who put all of his play money in one basket. Sure, for every winner, there were tens of people who used the same strategy and didn't win, but neither did the ones who did build a life-like diversified portfolio. 



Conclusion
----------

I won't give in to the postmodern idea that agile software development is just a phase, a belief, some even say religion, and that it's just a matter of opinion.      
So I'm quite sure we will be doing TDD, that we'll have a kanban board, and that we'llbe pair-programming more often than not. Even if it proves to be sub-optimal for a two-day project. 

*******************************************************************************************$$

The real problem is: does the fact that it's a game change the rules? Or, put differently: does it pay off to be doing things differently than in a real real-life situation, by focusing on the game rules, rather than on building the software itself? 

 

I can hear you ask: "Then why do you participate?"
My personal motivations to participate are that I like writing code, I like some good competition, and I want to show that <a href="http://www.playframework.org">playframework</a> (more on that in future blog posts) is the best way to build webapps in the Java world, if not to the rest of the world, at least to myself.


*******************************

In concreto, I'm talking about the following; I'm used to agile software development and TDD (test driven development, though I like to call it test driven design). One of the questions that popped up was whether or not we would be writing tests all the time, pair programming, 

To win, probably. But by doing so, we'll take out much of the fun of participating in the competition. And, if we do win by making use of the holes in the rules, there will always be a 'yes but'.



******************************
There's no secret; there's also nothing like 'Rapid Application Development'. Not IRL there isn't. 
Fast, cheap, good: pick any two. What should we pick for the RAD race? 